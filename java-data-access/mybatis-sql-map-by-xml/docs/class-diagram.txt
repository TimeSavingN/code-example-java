@startuml

''''''''''''''''''''''''''''''''''''
' Entity
''''''''''''''''''''''''''''''''''''

class entity.BaseEntity
{
    int id
    Timestamp createTime
    Timestamp modifyTime
    Boolean deleteFlag
}

class entity.Department
{
    'fields
    String name
}

entity.BaseEntity <|-- entity.Department

class entity.Employee
{
    'fields
    String name
    String nickname
    int age
    Department dept
}

entity.BaseEntity <|-- entity.Employee
entity.Employee "1" -- "many" entity.Department : contains

class entity.Page
{
    int pageNo
    int pageSize
    long count
}

''''''''''''''''''''''''''''''''''''
' Mapper
''''''''''''''''''''''''''''''''''''

interface mapper.BaseMapper

interface mapper.CrudMapper<T extends BaseEntity>
{
    int save(T entity)
    int saveSelective(T entity)
    int saveAll(Collection<T> entities)
    int deleteById(T entity)
    int deleteByIdLogically(T entity)
    int deleteAllByIds(Collection<T> entities)
    int deleteAllByFields(T entity)
    int deleteAllByMap(Map<String, Object> params)
    int update(T entity)
    int updateSelective(T entity)
    int updateAll(Collection<T> entities)
    T getById(Integer entity)
    T getById(Entity entity)
    long countByMap(Map<String, Object> params)
    List<T> findAllByFields(T entity)
    List<T> findPage(Page<T> page, T entity)
    List<T> findAllByMap(Map<String, Object> parameters)
    int execDmlSql(String sql)
    List<T> execDqlSql(String sql)
    long execDqlSql(String sql)
}

mapper.BaseMapper <|-- mapper.CrudMapper

interface mapper.DepartmentMapper<Department>
{
}

mapper.CrudMapper <|-- mapper.DepartmentMapper

interface mapper.EmployeeMapper<Employee>
{
}

mapper.CrudMapper <|-- mapper.EmployeeMapper

''''''''''''''''''''''''''''''''''''
' Service
''''''''''''''''''''''''''''''''''''

interface service.BaseService
{

}

interface service.CrudService<M extends CrudMapper<T>, T extends BaseEntity>
{
    int save(T entity)
    int saveAll(Collection<T> entities)
    int deleteById(T entity)
    int deleteAllByIds(Collection<T> entities)
    int update(T entity)
    int updateAllByIds(Collection<T> entities)
    T getById(int id);
    T getById(Entity entity)
    List<T> findPage(Page<T> page, T entity)
    List<T> findAllByFields(T entity)
    List<T> findAllByMap(Map<String, Object> parameters)
}

service.BaseService <|-- service.CrudService

interface service.DepartmentService<DepartmentMapper<Department>, Department>
{
}

service.CrudService <|-- service.DepartmentService

interface service.EmployeeService<EmployeeMapper<Employee>, Employee>
{
}
service.CrudService <|-- service.EmployeeService

interface service.SqlSessionFactoryService
{
    SqlSessionFactory getSqlSessionFactory()
}
service.BaseService <|-- service.SqlSessionFactoryService

abstract class service.AbstractBaseService
{

}
service.BaseService <|.. service.AbstractBaseService

abstract class service.AbstractCrudService
{
    int save(T entity)
    int saveAll(Collection<T> entities)
    int deleteById(T entity)
    int deleteAllByIds(Collection<T> entities)
    int update(T entity)
    int updateAllByIds(Collection<T> entities)
    T getById(int id);
    T getById(Entity entity)
    List<T> findPage(Page<T> page, T entity)
    List<T> findAllByFields(T entity)
    List<T> findAllByMap(Map<String, Object> parameters)
}
service.AbstractBaseService <|-- service.AbstractCrudService
service.CrudService <|.. service.AbstractCrudService

class service.impl.DepartmentServiceImpl
{

}
service.AbstractCrudService <|-- service.impl.DepartmentServiceImpl
service.DepartmentService <|.. service.impl.DepartmentServiceImpl

class service.impl.EmployeeServiceImpl
{
}
service.AbstractCrudService <|-- service.impl.EmployeeServiceImpl
service.EmployeeService <|.. service.impl.EmployeeServiceImpl


''''''''''''''''''''''''''''''''''''
' Others
''''''''''''''''''''''''''''''''''''


@enduml